//BST node
function Node(data, left, right){
	this.data = (data===undefined ? 0 :data)
	this.left = (left===undefined?null:left)
	this.right= (right===undefined?null:right)
	this.show = show;
}
//Binary search tree
function BST(){
	this.root = null;
	this.insert = insert;
	this.inOrder = inOrder;
	this.preOrder = preOrder;
	this.postOrder = postOrder;
	this.getMin = getMin;
	this.getMax = getMax;
	this.find = find;
}
//function to get data stored in each node
function show(){
	return this.data;
}

//Insert function to create a new node and insert data into it

function insert(data){
    var n = new Node(data, null, null);
        if(this.root == null){
		this.root = n;
	} else{
            var curr = this.root;
	    while(true){
		parent = curr;
		if(data < curr.data){
		    curr = curr.left;
		    if(curr == null){
		        parent.left = n;
			    break;
		        }
		    }else{
			curr = curr.right;
			if(curr == null){
			    parent.right = n;
			    break;
		    }
			
                }
	   } 
    }
}

//Funtion to perform inorder traversal
function inOrder(node){
	if(!(node == null)){
	   if(!(node.left===null)){
		inOrder(node.left)
		}
		console.log(node.show()+"")
           if(!(node.right===null)){
		inOrder(node.right)
		}
	}	
}
//Function to perform preorder traversal of the tree
function preOrder(node){
	if(!(node == null)){
		console.log(node.show()+"")
		preOrder(node.left)
		preOrder(node.right)
	}
}
//Function to perform Post order traversal of the tree
function postOrder(node){
	if(!(node == null)){
		postOrder(node.left)
		postOrder(node.right)
		console.log(node.show()+"")
	}
}
//Function to get the minimum value of a tree by traversing to the last node on the left side of the tree
function getMin(){
	var curr = this.root;
	while(!(curr.left ==null)){
		curr = curr.left
	}
	console.log(curr.data)
}
//function to obtain the maximum value on the tree by traversing right of the tree
function getMax(){
	var curr = this.root;
	while(!(curr.right ==null)){
		curr = curr.right
	}
	console.log(curr.data)
}
//finding a data and displaying it
function find(data){
	var curr = this.root;
	while(!(curr.data == data)){
		if(data<curr.data){
			curr = curr.left
		}
		else{
			curr = curr.right
		}
		if(curr==null){
			return null
		}
	}
	console.log(curr.data)
}
